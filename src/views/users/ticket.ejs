<div class="container mt-5">
  <!-- Ticket Header -->
  <div class="card mb-4">
    <div class="card-body">
      <div class="row">
        <div class="col-4">
          <input type="hidden" value="<?= ticket.id ?>" id="ticketId">
          <h4 id="ticketId"> #
            <?= ticket.id ?>
          </h4>
          <h5>
            <?= ticket.subject ?>
          </h5>
          <p class="text-muted">Created:
            <?= new Date(ticket.created_at).toLocaleString() ?>
          </p>
        </div>
        <div class="col-4">
          <? if (ticket.invoice_number) { ?>
          <p><strong>Invoice #:</strong>
            <?= ticket.invoice_number ?>
          </p>
          <? } ?>
          <? if (ticket.policy_number) { ?>
          <p><strong>Policy #:</strong>
            <?= ticket.policy_number ?>
          </p>
          <? } ?>
        </div>
        <div class="col-4 d-flex justify-content-end align-items-center">
          <p><strong>Status:</strong>
            <span class="badge 
              <?= ticket.status === 'open' ? 'bg-success' : 
                  ticket.status === 'in_progress' ? 'bg-warning text-dark' : 
                  ticket.status === 'resolved' ? 'bg-primary' : 'bg-secondary' ?>">
              <?= ticket.status ?>
            </span>
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- Messages / Follow-ups -->
  <div id="messagesWrap" class="d-flex flex-column gap-3">
    <? if (messages && messages.length > 0) { ?>
    <? messages.forEach((msg, index) => { ?>
    <div id="msg-<?= msg.id ?>" class="card p-3 <?- msg.author_type === 'staff' ? 'bg-light' : '' ?>"
      data-msg-id="<?= msg.id ?>">
      <div class="d-flex justify-content-between">
        <div class="flex-grow-1 me-3">
          <p class="mb-1 fw-semibold">
            #<?= msg.id ?>
            <?- msg.author_type === 'staff' ? 'Reply' : 'Message' ?>
          </p>

          <!-- displayed text node -->
          <!-- style="white-space: pre-wrap;" -->
          <p class="mb-1 message-text">
            <?= msg.message_text ?>
          </p>

          <small class="text-muted">
            By
            <?= msg.author_name ?> (
            <?= msg.author_type ?>) at
            <?= new Date(msg.created_at).toLocaleString() ?>, last updated
            <?= new Date(msg.updated_at).toLocaleString() ?>
          </small>

          <? if (msg.author_type === user.user_type) { ?>
          <? if (user.user_type === 'customer' && index >= 0) { ?>
            <? 
                const msgAgeMinutes = (new Date() - new Date(msg?.updated_at || msg?.created_at)) / (1000 * 60); 
            ?>
          <? if (msgAgeMinutes <= 30) { ?>
          <button class="btn btn-sm edit-msg" value="<?= msg.id ?>" title="Edit Post">
            <i class="bi bi-pencil-square"></i>
          </button>
          <button class="btn btn-sm delete-msg" value="<?= msg.id ?>" title="Delete Post">
            <i class="bi bi-trash3 text-red"></i>
          </button>
          <? } ?>
          <? } else if (user.user_type === 'staff') { ?>
          <button class="btn btn-sm edit-msg" value="<?= msg.id ?>" title="Edit Post">
            <i class="bi bi-pencil-square"></i>
          </button>
          <button class="btn btn-sm delete-msg" value="<?= msg.id ?>" title="Delete Post">
            <i class="bi bi-trash3 text-red"></i>
          </button>
          <? } ?>
          <? } ?>
        </div>

        <!-- Attachments -->
        <div class="d-flex justify-content-end align-items-center gap-2">
          <? if (msg.attachments && msg.attachments.length > 0) { ?>
          <? msg.attachments.forEach(file => { ?>
          <? if (file.file_type === 'pdf') { ?>
          <a href="/auth/ticket/attachments/<?= ticket.id ?>/<?= file.file_name ?>" target="_blank" class="mb-2">
            <i class="bi bi-file-earmark-pdf"></i>
            <?= file.original_name || file.file_name ?>
          </a>
          <? } else { ?>
          <a href="/auth/ticket/attachments/<?= ticket.id ?>/<?= file.file_name ?>" target="_blank" class="mb-2">
            <img src="/auth/ticket/attachments/<?= ticket.id ?>/<?= file.file_name ?>"
              alt="<?= file.original_name || file.file_name ?>" class="img-thumbnail" style="max-width: 100px;">
          </a>
          <? } ?>
          <? }); ?>
          <? } else { ?>
          <small class="text-muted">No attachments</small>
          <? } ?>
        </div>
      </div>
    </div>
    <? }); ?>
    <? } else { ?>
    <p>No follow-ups yet.</p>
    <? } ?>
  </div>


  <!-- Add Follow-up Form -->
  <div class="card my-5">
    <div class="card-header">Add Follow-up</div>
    <div class="card-body">
      <form action="/auth/ticket/<?= ticket.id ?>/reply" method="POST" enctype="multipart/form-data">
        <div class="mb-3">
          <label for="message_text" class="form-label">Message</label>
          <textarea name="message_text" id="message_text" rows="4" class="form-control" required></textarea>
        </div>
        <div class="mb-3">
          <label for="attachments" class="form-label">Attachments (images or PDFs)</label>
          <input type="file" name="attachments" id="attachments" class="form-control" multiple
            accept="image/*,application/pdf">
        </div>
        <button type="submit" class="btn btn-primary">Submit Follow-up</button>
      </form>

    </div>
  </div>

  <p class="my-5 small text-center text-notice"><strong>Note: </strong>You may edit or delete a message or post within 30 minutes of sending it.</p>
</div>


<script>
  // Optional: pick CSRF token if you expose one via <meta name="csrf-token" content="...">
  // const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;

  const wrap = document.getElementById('messagesWrap'); // container that wraps all messages
  const ticketId = document.getElementById('ticketId').value; //console.log(ticketId);

  wrap.addEventListener('click', async (e) => {
    const editBtn = e.target.closest('.edit-msg');
    const saveBtn = e.target.closest('.save-msg');
    const cancelBtn = e.target.closest('.cancel-edit');
    const delButton = e.target.closest('.delete-msg');

    // === EDIT clicked: swap <p.message-text> -> <textarea> + Save/Cancel ===
    if (editBtn) {
      const card = editBtn.closest('[data-msg-id]') || editBtn.closest('#msg-' + editBtn.value) || editBtn.closest('.card');
      if (!card) return;

      // Avoid opening multiple editors for the same card
      if (card.querySelector('form.inline-edit-form')) return;

      const textEl = card.querySelector('.message-text');
      if (!textEl) return;

      const originalText = textEl.textContent; // keep as plain text

      // Hide original text and inject inline form
      textEl.style.display = 'none';

      const form = document.createElement('form');
      form.className = 'inline-edit-form mt-2';
      form.dataset.msgId = editBtn.value; // keep id on the form for convenience
      form.innerHTML = `
        <div class="mb-2">
          <textarea class="form-control edit-textarea" rows="3">${originalText.trim()}</textarea>
        </div>
        <div class="d-flex gap-2">
          <button type="button" class="btn btn-sm btn-primary save-msg" value="${editBtn.value}">Save</button>
          <button type="button" class="btn btn-sm btn-secondary cancel-edit">Cancel</button>
        </div>
        <div class="small text-muted mt-1 edit-hint d-none">Savingâ€¦</div>
        <div class="small text-danger mt-1 edit-error d-none"></div>
      `;
      textEl.after(form);
      return;
    }

    // === CANCEL clicked: restore original text ===
    if (cancelBtn) {
      const form = cancelBtn.closest('form.inline-edit-form');
      const card = cancelBtn.closest('.card');
      const textEl = card?.querySelector('.message-text');
      if (form && textEl) {
        form.remove();
        textEl.style.display = '';
      }
      return;
    }

    // === SAVE clicked: call /messge/update and update DOM on success ===
    if (saveBtn) {
      const msgId = saveBtn.value; // from button value attribute
      const form = saveBtn.closest('form.inline-edit-form');
      const card = saveBtn.closest('.card');
      const textEl = card?.querySelector('.message-text');
      const textarea = form?.querySelector('.edit-textarea');
      const hint = form?.querySelector('.edit-hint');
      const errBox = form?.querySelector('.edit-error');

      if (!msgId || !form || !textEl || !textarea) return;

      const newText = textarea.value.trim();
      if (!newText) {
        // simple client-side validation
        errBox.classList.remove('d-none');
        errBox.textContent = 'Message text is required.';
        return;
      }

      // UI: indicate saving & disable buttons to prevent double submit
      hint?.classList.remove('d-none');
      errBox?.classList.add('d-none');
      const buttons = form.querySelectorAll('button');
      buttons.forEach(b => b.disabled = true);

      try {
        const res = await fetch('/auth/ticket/message/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            // ...(csrfToken ? { 'X-CSRF-Token': csrfToken } : {})
          },
          body: JSON.stringify({ id: msgId, message: newText, ticketId })
        });

        const data = await res.json().catch(() => ({}));

        if (!res.ok || data?.status !== true) {
          throw new Error(data?.error || data?.message || 'Update failed');
        }

        // Success: update UI text and close editor
        // textEl.textContent = newText; // keep plain text (prevents HTML injection)
        // form.remove();
        // textEl.style.display = '';
        window.location.reload();
      } catch (err) {
        // Show error & re-enable buttons
        errBox?.classList.remove('d-none');
        errBox.textContent = err.message || 'Something went wrong.';
        buttons.forEach(b => b.disabled = false);
        hint?.classList.add('d-none');
      }
    }

    if (delButton) {
      const msgId = delButton.value; // no need for Number() unless required
      if (!confirm('Are you sure you want to delete this message?')) return;

      try {
        const res = await fetch('/auth/ticket/message/delete', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: msgId })
        });

        const data = await res.json().catch(() => ({}));

        if (!res.ok || data?.status !== true) {
          throw new Error(data?.error || data?.message || 'Delete failed');
        }

        // window.location.reload(); // âœ… refresh on success
        const card = document.querySelector(`#msg-${msgId}`);
        if (card) card.remove();
      } catch (err) {
        alert(err.message || 'Something went wrong while deleting.');
      }
    }

  });
</script>